# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named boxExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from boxExt import *
except ImportError:
    pass

def getPluginID():
    return "box"

def getLabel():
    return "box"

def getVersion():
    return 1

def getGrouping():
    return "RarePizzas"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    del lastNode

    # Start of node "i1_2"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("i1_2")
    lastNode.setLabel("i1_2")
    lastNode.setPosition(1893, -3314)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupi1_2 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("../ingredients-db/0000-box-cardboard.png")
        del param

    param = lastNode.getParam("onMissingFrame")
    if param is not None:
        param.set("black")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "i1_2"

    # Start of node "w1_2"
    lastNode = app.createNode("fr.inria.built-in.Write", 1, group)
    lastNode.setScriptName("w1_2")
    lastNode.setLabel("w1_2")
    lastNode.setPosition(1905, -3039)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.75, 0.75, 0)
    groupw1_2 = lastNode

    param = lastNode.getParam("encodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.WritePNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("../oven/rarepizza-#/box.png")
        del param

    param = lastNode.getParam("formatType")
    if param is not None:
        param.set("input")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("frameRange")
    if param is not None:
        param.set("manual")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "w1_2"

    groupgroup = groupw1_2
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.75, 0.75, 0)
    param = lastNode.getParam("encodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.WritePNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("../oven/rarepizza-#/box.png")
        del param

    param = lastNode.getParam("formatType")
    if param is not None:
        param.set("input")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("frameRange")
    if param is not None:
        param.set("manual")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(0, 0)
    lastNode.setSize(0, 0)
    lastNode.setColor(0, 0, 0)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Source"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("Source")
    lastNode.setLabel("Source")
    lastNode.setPosition(0, 0)
    lastNode.setSize(0, 0)
    lastNode.setColor(0, 0, 0)
    groupgroupSource = lastNode

    del lastNode
    # End of node "Source"

    # Start of node "internalEncoderNode"
    lastNode = app.createNode("fr.inria.openfx.WritePNG", 1, groupgroup)
    lastNode.setScriptName("internalEncoderNode")
    lastNode.setLabel("internalEncoderNode")
    lastNode.setPosition(0, 0)
    lastNode.setSize(0, 0)
    lastNode.setColor(0, 0, 0)
    groupgroupinternalEncoderNode = lastNode

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("../oven/rarepizza-#/box.png")
        del param

    param = lastNode.getParam("formatType")
    if param is not None:
        param.set("input")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("HD")
        del param

    param = lastNode.getParam("frameRange")
    if param is not None:
        param.set("manual")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "internalEncoderNode"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupOutput1.connectInput(0, groupgroupinternalEncoderNode)
    groupgroupinternalEncoderNode.connectInput(0, groupgroupSource)


    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("i1_2_Sync")
    lastNode.setPosition(3785, -6628)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1905, -2953)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupi1_2.connectInput(0, groupInput1)
    groupw1_2.connectInput(0, groupi1_2)
    groupOutput1.connectInput(0, groupw1_2)

    try:
        extModule = sys.modules["boxExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
