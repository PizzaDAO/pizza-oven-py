# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named BakeExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from BakeExt import *
except ImportError:
    pass

def getPluginID():
    return "Bake"

def getLabel():
    return "Bake"

def getVersion():
    return 1

def getGrouping():
    return ""

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.Bake = lastNode.createPageParam("Bake", "Bake")
    param = lastNode.createDoubleParam("mass", "mass")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("grams")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.mass = param
    del param

    param = lastNode.createChoiceParam("unit", "unit")
    entries = [ ("g", ""),
    ("kg", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("grams\nkilograms")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.unit = param
    del param

    param = lastNode.createDoubleParam("density", "density")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("The kilogram per cubic metre (symbol: kg·m−3, or kg/m3) is an SI derived unit of density, defined by mass in kilograms divided by volume in cubic metres.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.density = param
    del param

    param = lastNode.createIntParam("height", "height")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("in pixels")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.height = param
    del param

    param = lastNode.createIntParam("area", "area")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("pixels in cm2\n\nmax areas\n9in crust = 413 cm2\n8in cheese = 325 cm2\n3.5 in (12.25 in2) = 79 cm2")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(51, 0)
    lastNode.area = param
    del param

    param = lastNode.createSeparatorParam("meta_________________", "meta")

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.meta_________________ = param
    del param

    param = lastNode.createDoubleParam("chunkiness", "chunkiness")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(27.2, 0)
    lastNode.chunkiness = param
    del param

    param = lastNode.createDoubleParam("spread", "spread")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(16.6, 0)
    lastNode.spread = param
    del param

    param = lastNode.createIntParam("thickness", "thickness")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.thickness = param
    del param

    param = lastNode.createGroupParam("mask", "mask")

    # Add the param to the page
    lastNode.Bake.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.mask = param
    del param

    param = lastNode.createFileParam("Read3filename", "File")
    param.setSequenceEnabled(True)

    # Add the param to the group, no need to add it to the page
    lastNode.mask.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/masks/topping-mask.png")
    lastNode.Read3filename = param
    del param

    param = lastNode.createDouble2DParam("Transform4translate", "Translate")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.mask.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Transform4translate = param
    del param

    param = lastNode.createDoubleParam("Transform4rotate", "Rotate")
    param.setDisplayMinimum(-180, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the group, no need to add it to the page
    lastNode.mask.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.Transform4rotate = param
    del param

    param = lastNode.createDouble2DParam("Transform4scale", "Scale")
    param.setMinimum(-10000, 0)
    param.setMaximum(10000, 0)
    param.setDisplayMinimum(0.1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-10000, 1)
    param.setMaximum(10000, 1)
    param.setDisplayMinimum(0.1, 1)
    param.setDisplayMaximum(10, 1)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.mask.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.9, 0)
    param.setValue(0.9, 1)
    lastNode.Transform4scale = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Bake', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Saturation1"
    lastNode = app.createNode("net.sf.openfx.SaturationPlugin", 2, group)
    lastNode.setScriptName("Saturation1")
    lastNode.setLabel("Saturation1")
    lastNode.setPosition(2093, 734)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupSaturation1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("saturation")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Saturation1"

    # Start of node "In1"
    lastNode = app.createNode("net.sf.openfx.MergeIn", 1, group)
    lastNode.setScriptName("In1")
    lastNode.setLabel("In1")
    lastNode.setPosition(1847, 837)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupIn1 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "In1"

    # Start of node "Grade6"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade6")
    lastNode.setLabel("Grade6")
    lastNode.setPosition(2093, 787)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade6 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade6"

    # Start of node "Clamp1"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp1")
    lastNode.setLabel("Clamp1")
    lastNode.setPosition(2093, 845)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Clamp1"

    # Start of node "Clamp2"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp2")
    lastNode.setLabel("Clamp2")
    lastNode.setPosition(1847, 724)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp2 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Clamp2"

    # Start of node "DropShadow2"
    lastNode = app.createNode("fr.inria.DropShadow", 1, group)
    lastNode.setScriptName("DropShadow2")
    lastNode.setLabel("DropShadow2")
    lastNode.setPosition(1670, 1123)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupDropShadow2 = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDoubleParam("shadowAngle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-360, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(-45, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(206, 0)
    lastNode.shadowAngle = param
    del param

    param = lastNode.createDoubleParam("shadowDist", "Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.shadowDist = param
    del param

    param = lastNode.createDouble2DParam("shadowBlur", "Bluriness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowBlur = param
    del param

    param = lastNode.createColorParam("shadowOpacity", "Opacity", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(0.5, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.502, 0)
    param.setValue(0.502, 1)
    param.setValue(0.502, 2)
    param.setValue(0.502, 3)
    lastNode.shadowOpacity = param
    del param

    param = lastNode.createColorParam("shadowColor", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowColor = param
    del param

    param = lastNode.createBooleanParam("shadowCFS", "Color from source")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.shadowCFS = param
    del param

    param = lastNode.createBooleanParam("shadowOnly", "Shadow only")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.shadowOnly = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "DropShadow2"

    groupgroup = groupDropShadow2
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.8, 0.5, 0.3)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDoubleParam("shadowAngle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-360, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(-45, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(206, 0)
    lastNode.shadowAngle = param
    del param

    param = lastNode.createDoubleParam("shadowDist", "Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.shadowDist = param
    del param

    param = lastNode.createDouble2DParam("shadowBlur", "Bluriness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowBlur = param
    del param

    param = lastNode.createColorParam("shadowOpacity", "Opacity", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(0.5, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.502, 0)
    param.setValue(0.502, 1)
    param.setValue(0.502, 2)
    param.setValue(0.502, 3)
    lastNode.shadowOpacity = param
    del param

    param = lastNode.createColorParam("shadowColor", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowColor = param
    del param

    param = lastNode.createBooleanParam("shadowCFS", "Color from source")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.shadowCFS = param
    del param

    param = lastNode.createBooleanParam("shadowOnly", "Shadow only")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.shadowOnly = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, groupgroup)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(759, 87)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupgroupShuffle1 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, groupgroup)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(759, 167)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupTransform2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-89.87940462991669, 0)
        param.setValue(-43.83711467890775, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(480, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, groupgroup)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(759, 341)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, groupgroup)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(759, -23)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupMultiply1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.502, 0)
        param.setValue(0.502, 1)
        param.setValue(0.502, 2)
        param.setValue(0.502, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply1"

    # Start of node "Solid1"
    lastNode = app.createNode("net.sf.openfx.Solid", 1, groupgroup)
    lastNode.setScriptName("Solid1")
    lastNode.setLabel("Solid1")
    lastNode.setPosition(584, 87)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupgroupSolid1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    del lastNode
    # End of node "Solid1"

    # Start of node "InputSource"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("InputSource")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(759, -112)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupgroupInputSource = lastNode

    del lastNode
    # End of node "InputSource"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1000, 497)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, groupgroup)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(759, 260)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupgroupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, groupgroup)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1000, 329)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupMerge1 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupShuffle1.connectInput(0, groupgroupSolid1)
    groupgroupShuffle1.connectInput(1, groupgroupMultiply1)
    groupgroupTransform2.connectInput(0, groupgroupShuffle1)
    groupgroupPremult1.connectInput(0, groupgroupBlur1)
    groupgroupMultiply1.connectInput(0, groupgroupInputSource)
    groupgroupOutput1.connectInput(0, groupgroupMerge1)
    groupgroupBlur1.connectInput(0, groupgroupTransform2)
    groupgroupMerge1.connectInput(0, groupgroupPremult1)
    groupgroupMerge1.connectInput(1, groupgroupInputSource)

    param = groupgroupShuffle1.getParam("disableNode")
    groupgroup.getParam("shadowCFS").setAsAlias(param)
    del param
    param = groupgroupTransform2.getParam("translate")
    param.setExpression("cos(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 0)
    param.setExpression("sin(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 1)
    del param
    param = groupgroupMultiply1.getParam("value")
    groupgroup.getParam("shadowOpacity").setAsAlias(param)
    del param
    param = groupgroupSolid1.getParam("color")
    groupgroup.getParam("shadowColor").setAsAlias(param)
    del param
    param = groupgroupBlur1.getParam("size")
    groupgroup.getParam("shadowBlur").setAsAlias(param)
    del param
    param = groupgroupMerge1.getParam("disableNode")
    groupgroup.getParam("shadowOnly").setAsAlias(param)
    del param

    param = groupgroup.getParam("shadowDist")
    param.setExpression("thisGroup.height.get()", False, 0)
    del param

    # Start of node "t_sauce_1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("t_sauce_1")
    lastNode.setLabel("t_sauce_1")
    lastNode.setPosition(1847, 957)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupt_sauce_1 = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1486, 0)
        param.setValue(1522, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "t_sauce_1"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1775, 1349)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("color-dodge")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "EdgeDetect1"
    lastNode = app.createNode("eu.cimg.EdgeDetect", 4, group)
    lastNode.setScriptName("EdgeDetect1")
    lastNode.setLabel("EdgeDetect1")
    lastNode.setPosition(2238, 980)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupEdgeDetect1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blurSize")
    if param is not None:
        param.setValue(16.9, 0)
        del param

    param = lastNode.getParam("erodeSize")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "EdgeDetect1"

    # Start of node "Grade9"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade9")
    lastNode.setLabel("Grade9")
    lastNode.setPosition(2238, 1091)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade9 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.02, 0)
        param.setValue(0.02, 1)
        param.setValue(0.02, 2)
        param.setValue(0.02, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade9"

    # Start of node "ColorCorrect5"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect5")
    lastNode.setLabel("ColorCorrect5")
    lastNode.setPosition(2245, 1287)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect5 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1.03, 0)
        param.setValue(1.03, 1)
        param.setValue(1.03, 2)
        param.setValue(1.03, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(0.89, 0)
        param.setValue(0.89, 1)
        param.setValue(0.89, 2)
        param.setValue(0.89, 3)
        del param

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(1.28, 0)
        param.setValue(1.28, 1)
        param.setValue(1.28, 2)
        param.setValue(1.28, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect5"

    # Start of node "Out5"
    lastNode = app.createNode("net.sf.openfx.MergeOut", 1, group)
    lastNode.setScriptName("Out5")
    lastNode.setLabel("Out5")
    lastNode.setPosition(2330, 1165)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupOut5 = lastNode

    del lastNode
    # End of node "Out5"

    # Start of node "Clamp3"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp3")
    lastNode.setLabel("Clamp3")
    lastNode.setPosition(1847, 1011)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp3 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Clamp3"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(2238, 1036)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(8, 0)
        param.setValue(8, 1)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Transform6"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform6")
    lastNode.setLabel("Transform6")
    lastNode.setPosition(2069, 1073)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform6 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-100, 0)
        param.setValue(-100, 1)
        del param

    del lastNode
    # End of node "Transform6"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Clamp2_Source")
    lastNode.setPosition(1847, 576)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1468, 2505)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(2093, 576)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(3072, 0)
        param.setValue(3072, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Clamp4"
    lastNode = app.createNode("net.sf.openfx.Clamp", 2, group)
    lastNode.setScriptName("Clamp4")
    lastNode.setLabel("Clamp4")
    lastNode.setPosition(1468, 1981)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupClamp4 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Clamp4"

    # Start of node "Transform6_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform6_2")
    lastNode.setLabel("Transform6_2")
    lastNode.setPosition(1847, 1185)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform6_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-100, 0)
        param.setValue(-100, 1)
        del param

    del lastNode
    # End of node "Transform6_2"

    # Start of node "Out5_2"
    lastNode = app.createNode("net.sf.openfx.MergeOut", 1, group)
    lastNode.setScriptName("Out5_2")
    lastNode.setLabel("Out5_2")
    lastNode.setPosition(1975, 1272)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupOut5_2 = lastNode

    del lastNode
    # End of node "Out5_2"

    # Start of node "ColorCorrect5_2"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect5_2")
    lastNode.setLabel("ColorCorrect5_2")
    lastNode.setPosition(2186, 1372)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect5_2 = lastNode

    param = lastNode.getParam("MasterSaturation")
    if param is not None:
        param.setValue(1.03, 0)
        param.setValue(1.03, 1)
        param.setValue(1.03, 2)
        param.setValue(1.03, 3)
        del param

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(1.08, 0)
        param.setValue(1.08, 1)
        param.setValue(1.08, 2)
        param.setValue(1.08, 3)
        del param

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(0.7, 0)
        param.setValue(0.7, 1)
        param.setValue(0.7, 2)
        param.setValue(0.7, 3)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect5_2"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1847, 1471)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("under")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Lerp1_Alpha"
    lastNode = app.createNode("fr.inria.built-in.Group", 1, group)
    lastNode.setScriptName("Lerp1_Alpha")
    lastNode.setLabel("Lerp1 Alpha")
    lastNode.setPosition(2305, 653)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupLerp1_Alpha = lastNode


    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createSeparatorParam("integer_________", "integer linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.integer_________ = param
    del param

    param = lastNode.createIntParam("i_input", "i_input")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.i_input = param
    del param

    param = lastNode.createInt2DParam("i_input_range", "i_input_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.i_input_range = param
    del param

    param = lastNode.createInt2DParam("i_lerp_range", "i_lerp_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(7, 1)
    lastNode.i_lerp_range = param
    del param

    param = lastNode.createIntParam("i_lerp_result", "i_lerp_result")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.i_lerp_result = param
    del param

    param = lastNode.createSeparatorParam("float________", "float linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.float________ = param
    del param

    param = lastNode.createDoubleParam("f_input", "f_input")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(27.2, 0)
    lastNode.f_input = param
    del param

    param = lastNode.createDouble2DParam("f_input_range", "f_input_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.f_input_range = param
    del param

    param = lastNode.createDouble2DParam("f_lerp_range", "f_lerp_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.02, 1)
    lastNode.f_lerp_range = param
    del param

    param = lastNode.createDoubleParam("f_lerp_result", "f_lerp_result")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.00544, 0)
    lastNode.f_lerp_result = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Lerp1_Alpha"

    groupgroup = groupLerp1_Alpha
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createSeparatorParam("integer_________", "integer linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.integer_________ = param
    del param

    param = lastNode.createIntParam("i_input", "i_input")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.i_input = param
    del param

    param = lastNode.createInt2DParam("i_input_range", "i_input_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.i_input_range = param
    del param

    param = lastNode.createInt2DParam("i_lerp_range", "i_lerp_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(7, 1)
    lastNode.i_lerp_range = param
    del param

    param = lastNode.createIntParam("i_lerp_result", "i_lerp_result")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.i_lerp_result = param
    del param

    param = lastNode.createSeparatorParam("float________", "float linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.float________ = param
    del param

    param = lastNode.createDoubleParam("f_input", "f_input")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(27.2, 0)
    lastNode.f_input = param
    del param

    param = lastNode.createDouble2DParam("f_input_range", "f_input_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.f_input_range = param
    del param

    param = lastNode.createDouble2DParam("f_lerp_range", "f_lerp_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.02, 1)
    lastNode.f_lerp_range = param
    del param

    param = lastNode.createDoubleParam("f_lerp_result", "f_lerp_result")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.00544, 0)
    lastNode.f_lerp_result = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(642, 175)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupgroupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(642, 247)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupOutput1.connectInput(0, groupgroupInput1)

    param = groupgroup.getParam("i_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.i_input.get()\n\ni0 = thisNode.i_input_range.get()[0]\ni1 = thisNode.i_input_range.get()[1]\n\nr0 = thisNode.i_lerp_range.get()[0]\nr1 = thisNode.i_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param
    param = groupgroup.getParam("f_input")
    param.setExpression("thisGroup.chunkiness.get()", False, 0)
    del param
    param = groupgroup.getParam("f_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.f_input.get()\n\ni0 = thisNode.f_input_range.get()[0]\ni1 = thisNode.f_input_range.get()[1]\n\nr0 = thisNode.f_lerp_range.get()[0]\nr1 = thisNode.f_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param

    # Start of node "Plasma2"
    lastNode = app.createNode("net.sf.cimg.CImgPlasma", 2, group)
    lastNode.setScriptName("Plasma2")
    lastNode.setLabel("Plasma2")
    lastNode.setPosition(2093, 658)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupPlasma2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("alpha")
    if param is not None:
        param.setValue(0.00544, 0)
        del param

    param = lastNode.getParam("beta")
    if param is not None:
        param.setValue(0.083, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(7, 0)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Plasma2"

    # Start of node "Lerp2_Beta"
    lastNode = app.createNode("fr.inria.built-in.Group", 1, group)
    lastNode.setScriptName("Lerp2_Beta")
    lastNode.setLabel("Lerp2 Beta")
    lastNode.setPosition(2309, 751)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupLerp2_Beta = lastNode


    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createSeparatorParam("integer_________", "integer linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.integer_________ = param
    del param

    param = lastNode.createIntParam("i_input", "i_input")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.i_input = param
    del param

    param = lastNode.createInt2DParam("i_input_range", "i_input_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.i_input_range = param
    del param

    param = lastNode.createInt2DParam("i_lerp_range", "i_lerp_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(7, 1)
    lastNode.i_lerp_range = param
    del param

    param = lastNode.createIntParam("i_lerp_result", "i_lerp_result")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(7, 0)
    lastNode.i_lerp_result = param
    del param

    param = lastNode.createSeparatorParam("float________", "float linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.float________ = param
    del param

    param = lastNode.createDoubleParam("f_input", "f_input")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(16.6, 0)
    lastNode.f_input = param
    del param

    param = lastNode.createDouble2DParam("f_input_range", "f_input_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.f_input_range = param
    del param

    param = lastNode.createDouble2DParam("f_lerp_range", "f_lerp_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 1)
    lastNode.f_lerp_range = param
    del param

    param = lastNode.createDoubleParam("f_lerp_result", "f_lerp_result")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.083, 0)
    lastNode.f_lerp_result = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Lerp2_Beta"

    groupgroup = groupLerp2_Beta
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.Controls = lastNode.createPageParam("Controls", "Controls")
    param = lastNode.createSeparatorParam("integer_________", "integer linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.integer_________ = param
    del param

    param = lastNode.createIntParam("i_input", "i_input")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.i_input = param
    del param

    param = lastNode.createInt2DParam("i_input_range", "i_input_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.i_input_range = param
    del param

    param = lastNode.createInt2DParam("i_lerp_range", "i_lerp_range")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(7, 1)
    lastNode.i_lerp_range = param
    del param

    param = lastNode.createIntParam("i_lerp_result", "i_lerp_result")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(7, 0)
    lastNode.i_lerp_result = param
    del param

    param = lastNode.createSeparatorParam("float________", "float linear interpolation")

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.float________ = param
    del param

    param = lastNode.createDoubleParam("f_input", "f_input")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(16.6, 0)
    lastNode.f_input = param
    del param

    param = lastNode.createDouble2DParam("f_input_range", "f_input_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 1)
    lastNode.f_input_range = param
    del param

    param = lastNode.createDouble2DParam("f_lerp_range", "f_lerp_range")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 1)
    lastNode.f_lerp_range = param
    del param

    param = lastNode.createDoubleParam("f_lerp_result", "f_lerp_result")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.Controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.083, 0)
    lastNode.f_lerp_result = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['Controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(642, 175)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupgroupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(642, 247)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupOutput1.connectInput(0, groupgroupInput1)

    param = groupgroup.getParam("i_input")
    param.setExpression("thisGroup.thickness.get()", False, 0)
    del param
    param = groupgroup.getParam("i_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.i_input.get()\n\ni0 = thisNode.i_input_range.get()[0]\ni1 = thisNode.i_input_range.get()[1]\n\nr0 = thisNode.i_lerp_range.get()[0]\nr1 = thisNode.i_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param
    param = groupgroup.getParam("f_input")
    param.setExpression("thisGroup.spread.get()", False, 0)
    del param
    param = groupgroup.getParam("f_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.f_input.get()\n\ni0 = thisNode.f_input_range.get()[0]\ni1 = thisNode.f_input_range.get()[1]\n\nr0 = thisNode.f_lerp_range.get()[0]\nr1 = thisNode.f_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param

    # Start of node "Plasma3"
    lastNode = app.createNode("net.sf.cimg.CImgPlasma", 2, group)
    lastNode.setScriptName("Plasma3")
    lastNode.setLabel("Plasma3")
    lastNode.setPosition(2689, 660)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupPlasma3 = lastNode

    param = lastNode.getParam("alpha")
    if param is not None:
        param.setValue(0.02, 0)
        del param

    del lastNode
    # End of node "Plasma3"

    # Start of node "EdgeExtend1"
    lastNode = app.createNode("eu.cimg.EdgeExtend", 4, group)
    lastNode.setScriptName("EdgeExtend1")
    lastNode.setLabel("EdgeExtend1")
    lastNode.setPosition(2826, 1566)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupEdgeExtend1 = lastNode

    param = lastNode.getParam("edgeExtendSize")
    if param is not None:
        param.setValue(44.8, 0)
        del param

    param = lastNode.getParam("edgeExtendSlices")
    if param is not None:
        param.setValue(8, 0)
        del param

    del lastNode
    # End of node "EdgeExtend1"

    # Start of node "Out1"
    lastNode = app.createNode("net.sf.openfx.MergeOut", 1, group)
    lastNode.setScriptName("Out1")
    lastNode.setLabel("Out1")
    lastNode.setPosition(2646, 1736)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupOut1 = lastNode

    del lastNode
    # End of node "Out1"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(2470, 1883)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply1"

    # Start of node "Erode1"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1")
    lastNode.setLabel("Erode1")
    lastNode.setPosition(2502, 1595)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(51, 0)
        param.setValue(51, 1)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1"

    # Start of node "Multiply2"
    lastNode = app.createNode("net.sf.openfx.MergeMultiply", 1, group)
    lastNode.setScriptName("Multiply2")
    lastNode.setLabel("Multiply2")
    lastNode.setPosition(1847, 1823)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMultiply2 = lastNode

    del lastNode
    # End of node "Multiply2"

    # Start of node "Multiply3"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("Multiply3")
    lastNode.setLabel("Multiply3")
    lastNode.setPosition(2186, 1789)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiply3 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply3"

    # Start of node "Plasma1"
    lastNode = app.createNode("net.sf.cimg.CImgPlasma", 2, group)
    lastNode.setScriptName("Plasma1")
    lastNode.setLabel("Plasma1")
    lastNode.setPosition(2373, 1710)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3098, 0.5216, 0.2)
    groupPlasma1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("alpha")
    if param is not None:
        param.setValue(0.00264, 0)
        del param

    param = lastNode.getParam("beta")
    if param is not None:
        param.setValue(0.423, 0)
        del param

    del lastNode
    # End of node "Plasma1"

    # Start of node "ReadMask"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("ReadMask")
    lastNode.setLabel("ReadMask")
    lastNode.setPosition(1069, 2044)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupReadMask = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/masks/topping-mask.png")
        del param

    param = lastNode.getParam("lastFrame")
    if param is not None:
        param.setValue(10000, 0)
        del param

    param = lastNode.getParam("timeDomainUserEdited")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("opaque")
        del param

    param = lastNode.getParam("outputPremult")
    if param is not None:
        param.set("opaque")
        del param

    param = lastNode.getParam("outputComponents")
    if param is not None:
        param.set("RGB")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ReadMask"

    # Start of node "TransformMask"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformMask")
    lastNode.setLabel("TransformMask")
    lastNode.setPosition(1081, 2257)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformMask = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.9, 0)
        param.setValue(0.9, 1)
        del param

    del lastNode
    # End of node "TransformMask"

    # Start of node "ShuffleMask"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("ShuffleMask")
    lastNode.setLabel("ShuffleMask")
    lastNode.setPosition(1081, 2194)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffleMask = lastNode

    param = lastNode.getParam("outputPremult")
    if param is not None:
        param.set("Premultiplied")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "ShuffleMask"

    # Start of node "MultiplyMask"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, group)
    lastNode.setScriptName("MultiplyMask")
    lastNode.setLabel("MultiplyMask")
    lastNode.setPosition(1468, 2266)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupMultiplyMask = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "MultiplyMask"

    # Now that all nodes are created we can connect them together, restore expressions
    groupSaturation1.connectInput(0, groupPlasma2)
    groupIn1.connectInput(0, groupClamp1)
    groupIn1.connectInput(1, groupClamp2)
    groupGrade6.connectInput(0, groupSaturation1)
    groupClamp1.connectInput(0, groupGrade6)
    groupClamp2.connectInput(0, groupInput1)
    groupDropShadow2.connectInput(0, groupClamp3)
    groupt_sauce_1.connectInput(0, groupIn1)
    groupMerge3.connectInput(0, groupColorCorrect5)
    groupMerge3.connectInput(1, groupTransform6_2)
    groupEdgeDetect1.connectInput(0, groupClamp3)
    groupGrade9.connectInput(0, groupBlur1)
    groupColorCorrect5.connectInput(0, groupClamp3)
    groupColorCorrect5.connectInput(1, groupOut5)
    groupOut5.connectInput(0, groupTransform6)
    groupOut5.connectInput(1, groupGrade9)
    groupClamp3.connectInput(0, groupt_sauce_1)
    groupBlur1.connectInput(0, groupEdgeDetect1)
    groupTransform6.connectInput(0, groupClamp3)
    groupOutput1.connectInput(0, groupMultiplyMask)
    groupConstant1.connectInput(0, groupInput1)
    groupClamp4.connectInput(0, groupMerge1)
    groupTransform6_2.connectInput(0, groupClamp3)
    groupOut5_2.connectInput(0, groupTransform6_2)
    groupOut5_2.connectInput(1, groupGrade9)
    groupColorCorrect5_2.connectInput(0, groupClamp3)
    groupColorCorrect5_2.connectInput(1, groupOut5_2)
    groupMerge1.connectInput(0, groupMerge3)
    groupMerge1.connectInput(1, groupColorCorrect5_2)
    groupPlasma2.connectInput(0, groupConstant1)
    groupEdgeExtend1.connectInput(0, groupMerge1)
    groupOut1.connectInput(0, groupErode1)
    groupOut1.connectInput(1, groupEdgeExtend1)
    groupMultiply1.connectInput(0, groupOut1)
    groupMultiply1.connectInput(1, groupPlasma1)
    groupErode1.connectInput(0, groupInput1)
    groupMultiply2.connectInput(0, groupMultiply1)
    groupMultiply2.connectInput(1, groupMerge1)
    groupMultiply3.connectInput(0, groupMerge1)
    groupMultiply3.connectInput(1, groupMultiply1)
    groupTransformMask.connectInput(0, groupShuffleMask)
    groupShuffleMask.connectInput(0, groupReadMask)
    groupMultiplyMask.connectInput(0, groupClamp4)
    groupMultiplyMask.connectInput(1, groupTransformMask)

    param = groupIn1.getParam("mix")
    param.setExpression("thisGroup.int3.get()", False, 0)
    del param
    param = groupDropShadow2.getParam("shadowDist")
    param.setExpression("thisGroup.height.get()", False, 0)
    del param
    param = groupTransform6.getParam("translate")
    param.setExpression("thisGroup.height.get()*-1", False, 0)
    param.setExpression("thisGroup.height.get()*-1", False, 1)
    del param
    param = groupTransform6_2.getParam("translate")
    param.setExpression("thisGroup.height.get()*-1", False, 0)
    param.setExpression("thisGroup.height.get()*-1", False, 1)
    del param
    param = groupLerp1_Alpha.getParam("i_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.i_input.get()\n\ni0 = thisNode.i_input_range.get()[0]\ni1 = thisNode.i_input_range.get()[1]\n\nr0 = thisNode.i_lerp_range.get()[0]\nr1 = thisNode.i_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param
    param = groupLerp1_Alpha.getParam("f_input")
    param.setExpression("thisGroup.chunkiness.get()", False, 0)
    del param
    param = groupLerp1_Alpha.getParam("f_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.f_input.get()\n\ni0 = thisNode.f_input_range.get()[0]\ni1 = thisNode.f_input_range.get()[1]\n\nr0 = thisNode.f_lerp_range.get()[0]\nr1 = thisNode.f_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param
    param = groupPlasma2.getParam("alpha")
    param.setExpression("thisGroup.Lerp1_Alpha.f_lerp_result.get()", False, 0)
    del param
    param = groupPlasma2.getParam("beta")
    param.setExpression("thisGroup.Lerp2_Beta.f_lerp_result.get()", False, 0)
    del param
    param = groupPlasma2.getParam("scale")
    param.setExpression("thisGroup.Lerp2_Beta.i_lerp_result.get()", False, 0)
    del param
    param = groupLerp2_Beta.getParam("i_input")
    param.setExpression("thisGroup.thickness.get()", False, 0)
    del param
    param = groupLerp2_Beta.getParam("i_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.i_input.get()\n\ni0 = thisNode.i_input_range.get()[0]\ni1 = thisNode.i_input_range.get()[1]\n\nr0 = thisNode.i_lerp_range.get()[0]\nr1 = thisNode.i_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param
    param = groupLerp2_Beta.getParam("f_input")
    param.setExpression("thisGroup.spread.get()", False, 0)
    del param
    param = groupLerp2_Beta.getParam("f_lerp_result")
    param.setExpression("import numpy as np\n\ni = thisNode.f_input.get()\n\ni0 = thisNode.f_input_range.get()[0]\ni1 = thisNode.f_input_range.get()[1]\n\nr0 = thisNode.f_lerp_range.get()[0]\nr1 = thisNode.f_lerp_range.get()[1]\n\nir = [i0, i1]\nlr = [r0, r1]\n\ny_new = np.interp(i, ir, lr)\nret = y_new\n\n\n", True, 0)
    del param
    param = groupReadMask.getParam("filename")
    group.getParam("Read3filename").setAsAlias(param)
    del param
    param = groupTransformMask.getParam("translate")
    group.getParam("Transform4translate").setAsAlias(param)
    del param
    param = groupTransformMask.getParam("rotate")
    group.getParam("Transform4rotate").setAsAlias(param)
    del param
    param = groupTransformMask.getParam("scale")
    group.getParam("Transform4scale").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["BakeExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
