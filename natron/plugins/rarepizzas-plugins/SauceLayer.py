# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named SauceLayerExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from SauceLayerExt import *
except ImportError:
    pass

def getPluginID():
    return "SauceLayer"

def getLabel():
    return "SauceLayer"

def getVersion():
    return 1

def getGrouping():
    return ""

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    del lastNode

    # Start of node "Read_1000"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_1000")
    lastNode.setLabel("Read 1000")
    lastNode.setPosition(2117, -1962)
    lastNode.setSize(128, 272)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_1000 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<font size=\"26\" color=\"#000000\" face=\"Droid Sans\"><Natron>(1000-crust-thin.png)</Natron>1000</font>")
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Images]/1000-crust-thin.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_1000"

    # Start of node "Read_1010"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_1010")
    lastNode.setLabel("Read 1010")
    lastNode.setPosition(2578, -1960)
    lastNode.setSize(128, 272)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_1010 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Images]/1010-crust-thick.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_1010"

    # Start of node "groupshadow_2"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("groupshadow_2")
    lastNode.setLabel("group-crust")
    lastNode.setPosition(1866, -2022)
    lastNode.setSize(1511, 738)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupgroupshadow_2 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"26\" color=\"#000000\" face=\"Droid Sans\">Crust</font>")
        del param

    del lastNode
    # End of node "groupshadow_2"

    # Start of node "Sauce_2"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Sauce_2")
    lastNode.setLabel("Sauce_2")
    lastNode.setPosition(714, -2045)
    lastNode.setSize(786, 1000)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupSauce_2 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"26\" color=\"#000000\" face=\"Droid Sans\">1000-1999\nCrust\n\n</font>")
        del param

    del lastNode
    # End of node "Sauce_2"

    # Start of node "TableSpread_1000"
    lastNode = app.createNode("net.sf.openfx.ContactSheetOFX", 1, group)
    lastNode.setScriptName("TableSpread_1000")
    lastNode.setLabel("TableSpread_1000")
    lastNode.setPosition(1241, -1812)
    lastNode.setSize(80, 158)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupTableSpread_1000 = lastNode

    param = lastNode.getParam("resolution")
    if param is not None:
        param.setValue(3072, 1)
        del param

    param = lastNode.getParam("rowsColumns")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(2, 1)
        del param

    param = lastNode.getParam("rowOrder")
    if param is not None:
        param.set("topbottom")
        del param

    param = lastNode.getParam("selectionInput")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "TableSpread_1000"

    # Start of node "Dot20"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot20")
    lastNode.setLabel("Dot20")
    lastNode.setPosition(1103, -1203)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot20 = lastNode

    del lastNode
    # End of node "Dot20"

    # Start of node "Dot30"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot30")
    lastNode.setLabel("Dot30")
    lastNode.setPosition(1175, -1152)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot30 = lastNode

    del lastNode
    # End of node "Dot30"

    # Start of node "Read_1020"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_1020")
    lastNode.setLabel("Read 1020")
    lastNode.setPosition(2901, -1966)
    lastNode.setSize(128, 272)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_1020 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("hideInputs")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Images]/1020-crust-moon.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_1020"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(2913, -1350)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1 = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(3072, 0)
        param.setValue(3072, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "Dot19"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot19")
    lastNode.setLabel("Dot19")
    lastNode.setPosition(1033, -1229)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot19 = lastNode

    del lastNode
    # End of node "Dot19"

    # Start of node "Crop1_2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1_2")
    lastNode.setLabel("Crop1_2")
    lastNode.setPosition(2590, -1355)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1_2 = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(3072, 0)
        param.setValue(3072, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop1_2"

    # Start of node "Crop1_4"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1_4")
    lastNode.setLabel("Crop1_4")
    lastNode.setPosition(2129, -1359)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1_4 = lastNode

    param = lastNode.getParam("rectangleInteractEnable")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("format")
        del param

    param = lastNode.getParam("NatronParamFormatSize")
    if param is not None:
        param.setValue(3072, 0)
        param.setValue(3072, 1)
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop1_4"

    # Start of node "Crop5"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop5")
    lastNode.setLabel("Crop5")
    lastNode.setPosition(835, -1400)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop5 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("project")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    del lastNode
    # End of node "Crop5"

    # Start of node "Merge10"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge10")
    lastNode.setLabel("Merge10")
    lastNode.setPosition(1058, -1402)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge10 = lastNode

    del lastNode
    # End of node "Merge10"

    # Start of node "TRS_1000"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TRS_1000")
    lastNode.setLabel("TRS_1000")
    lastNode.setPosition(2127, -1420)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTRS_1000 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "TRS_1000"

    # Start of node "TRS_1010"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TRS_1010")
    lastNode.setLabel("TRS_1010")
    lastNode.setPosition(2590, -1406)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTRS_1010 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "TRS_1010"

    # Start of node "TRS_1020"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TRS_1020")
    lastNode.setLabel("TRS_1020")
    lastNode.setPosition(2913, -1392)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTRS_1020 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "TRS_1020"

    # Start of node "switch_1000"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("switch_1000")
    lastNode.setLabel("switch_1000")
    lastNode.setPosition(2129, -1235)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupswitch_1000 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "switch_1000"

    # Start of node "Switch2_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2_2")
    lastNode.setLabel("switch_1010")
    lastNode.setPosition(2590, -1209)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2_2"

    # Start of node "Switch2_2_2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2_2_2")
    lastNode.setLabel("switch_1020")
    lastNode.setPosition(2913, -1158)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2_2_2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2_2_2"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(835, -954)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupTableSpread_1000.connectInput(0, groupCrop1_4)
    groupTableSpread_1000.connectInput(1, groupCrop1_2)
    groupTableSpread_1000.connectInput(2, groupCrop1)
    groupDot20.connectInput(0, groupSwitch2_2)
    groupDot30.connectInput(0, groupSwitch2_2_2)
    groupCrop1.connectInput(0, groupTRS_1020)
    groupDot19.connectInput(0, groupswitch_1000)
    groupCrop1_2.connectInput(0, groupTRS_1010)
    groupCrop1_4.connectInput(0, groupTRS_1000)
    groupCrop5.connectInput(0, groupMerge10)
    groupMerge10.connectInput(0, groupDot19)
    groupMerge10.connectInput(1, groupDot20)
    groupMerge10.connectInput(3, groupDot30)
    groupTRS_1000.connectInput(0, groupRead_1000)
    groupTRS_1010.connectInput(0, groupRead_1010)
    groupTRS_1020.connectInput(0, groupRead_1020)
    groupswitch_1000.connectInput(1, groupCrop1_4)
    groupSwitch2_2.connectInput(1, groupCrop1_2)
    groupSwitch2_2_2.connectInput(1, groupCrop1)
    groupOutput1.connectInput(0, groupCrop5)

    param = groupTRS_1000.getParam("rotate")
    param.setExpression("app.Control.TRS_1000rotate.get()", False, 0)
    del param
    param = groupTRS_1010.getParam("translate")
    param.setExpression("app.Control.TRS_1010translate.get()[dimension]", False, 0)
    param.setExpression("app.Control.TRS_1010translate.get()[dimension]", False, 1)
    del param
    param = groupTRS_1010.getParam("rotate")
    param.setExpression("app.Control.TRS_1010rotate.get()", False, 0)
    del param
    param = groupTRS_1020.getParam("translate")
    param.setExpression("app.Control.TRS_1020translate.get()[dimension]", False, 0)
    param.setExpression("app.Control.TRS_1020translate.get()[dimension]", False, 1)
    del param
    param = groupTRS_1020.getParam("rotate")
    param.setExpression("app.Control.TRS_1020rotate.get()", False, 0)
    del param
    param = groupswitch_1000.getParam("which")
    param.setExpression("app.Control.switch_1000which.get()", False, 0)
    del param
    param = groupSwitch2_2.getParam("which")
    param.setExpression("app.Control.switch_1010which.get()", False, 0)
    del param
    param = groupSwitch2_2_2.getParam("which")
    param.setExpression("app.Control.switch_1020which.get()", False, 0)
    del param

    try:
        extModule = sys.modules["SauceLayerExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
