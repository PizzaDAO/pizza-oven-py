# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named comboExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from comboExt import *
except ImportError:
    pass

def getPluginID():
    return "combo"

def getLabel():
    return "combo"

def getVersion():
    return 1

def getIconPath():
    return "scatter.png"

def getGrouping():
    return "combo"

def getPluginDescription():
    return "\t"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.702, 0.01176, 0.6902)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("combo.cdbChanged")
        del param


    # Create the user parameters
    lastNode.ComboControl = lastNode.createPageParam("ComboControl", "Combo Controls")
    param = lastNode.createFileParam("cdb", "combo-db")
    param.setSequenceEnabled(False)

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("Path to combo file:\n\n[Project]/combo-db.csv")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/combo-db.csv")
    lastNode.cdb = param
    del param

    param = lastNode.createSeparatorParam("sep_id", "")

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep_id = param
    del param

    param = lastNode.createIntParam("cid", "Combo ID")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setValue(140, 0)
    lastNode.cid = param
    del param

    param = lastNode.createBooleanParam("load_images", "Load Images")
    param.setDefaultValue(True)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("when checked, this will load the footages if they exist on disk")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.load_images = param
    del param

    param = lastNode.createButtonParam("load", "Load")

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.load = param
    del param

    param = lastNode.createButtonParam("save", "Save")

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.save = param
    del param

    param = lastNode.createSeparatorParam("s____", "")

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.s____ = param
    del param

    param = lastNode.createStringParam("combo_name", "Combo Name")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("Laszo Bitcoin Centaur serving devilish spicy Jalapeno Peppers")
    lastNode.combo_name = param
    del param

    param = lastNode.createStringParam("combo_category", "Combo Category")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("Devils Work")
    lastNode.combo_category = param
    del param

    param = lastNode.createStringParam("cdb_rows", "Combo CSV")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeMultiLine)

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(True)
    param.setValue("A1  CODE\t\tTYPE\t\t\tNAME\nA2  100\t\tNone\t\tBleu Kale Delight\nA3  110\t\tHandpie\t\tShimp on Kale with Butter\nA4  120\t\tHandpie\t\tRoast Beef Finger with Pepperoni\nA5  130\t\tHandpie\t\tPoodle Parsely pooping Spacemeat on Spam\nA6  140\t\tDevils Work\t\tLaszo Bitcoin Centaur serving devilish spicy Jalapeno Peppers\n")
    lastNode.cdb_rows = param
    del param

    param = lastNode.createGroupParam("linked_data_group", "Linked Data")

    # Add the param to the page
    lastNode.ComboControl.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.linked_data_group = param
    del param

    param = lastNode.createFileParam("elem0", "elem0")
    param.setSequenceEnabled(False)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/7010-topping-misc-supernaturalpoodle.png")
    lastNode.elem0 = param
    del param

    param = lastNode.createInt2DParam("elem0_translate", "translate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(149, 0)
    param.setValue(-5, 1)
    lastNode.elem0_translate = param
    del param

    param = lastNode.createIntParam("elem0_rotate", "rotate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0, 0)
    lastNode.elem0_rotate = param
    del param

    param = lastNode.createFileParam("elem1", "elem1")
    param.setSequenceEnabled(False)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/6901-topping-crypto-laszlo.png")
    lastNode.elem1 = param
    del param

    param = lastNode.createInt2DParam("elem1_translate", "translate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(296, 0)
    param.setValue(495, 1)
    lastNode.elem1_translate = param
    del param

    param = lastNode.createIntParam("elem1_rotate", "rotate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0, 0)
    lastNode.elem1_rotate = param
    del param

    param = lastNode.createFileParam("elem2", "elem2")
    param.setSequenceEnabled(False)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/5210-topping-pepper-jalapeno.png")
    lastNode.elem2 = param
    del param

    param = lastNode.createInt2DParam("elem2_translate", "translate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(380, 0)
    param.setValue(124, 1)
    lastNode.elem2_translate = param
    del param

    param = lastNode.createIntParam("elem2_rotate", "rotate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(9, 0)
    lastNode.elem2_rotate = param
    del param

    param = lastNode.createFileParam("elem3", "elem3")
    param.setSequenceEnabled(False)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/4360-topping-meat-zombie.png")
    lastNode.elem3 = param
    del param

    param = lastNode.createInt2DParam("elem3_translate", "translate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(510, 0)
    param.setValue(778, 1)
    lastNode.elem3_translate = param
    del param

    param = lastNode.createIntParam("elem3_rotate", "rotate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(180, 0)
    lastNode.elem3_rotate = param
    del param

    param = lastNode.createFileParam("elem4", "elem4")
    param.setSequenceEnabled(False)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/4360-topping-meat-zombie.png")
    lastNode.elem4 = param
    del param

    param = lastNode.createInt2DParam("elem4_translate", "translate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(419, 0)
    param.setValue(760, 1)
    lastNode.elem4_translate = param
    del param

    param = lastNode.createIntParam("elem4_rotate", "rotate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0, 0)
    lastNode.elem4_rotate = param
    del param

    param = lastNode.createDouble2DParam("elem0_scale", "scale0")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("\t")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.7, 0)
    param.setValue(0.7, 1)
    lastNode.elem0_scale = param
    del param

    param = lastNode.createDouble2DParam("elem1_scale", "scale1")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.6, 0)
    param.setValue(0.6, 1)
    lastNode.elem1_scale = param
    del param

    param = lastNode.createDouble2DParam("elem2_scale", "scale2")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.1, 0)
    param.setValue(0.1, 1)
    lastNode.elem2_scale = param
    del param

    param = lastNode.createDouble2DParam("elem3_scale", "scale3")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.23, 0)
    param.setValue(0.23, 1)
    lastNode.elem3_scale = param
    del param

    param = lastNode.createDouble2DParam("elem4_scale", "scale4")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(0, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(0, 1)

    # Add the param to the group, no need to add it to the page
    lastNode.linked_data_group.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.23, 0)
    param.setValue(-0.23, 1)
    lastNode.elem4_scale = param
    del param

    lastNode.Arrangements = lastNode.createPageParam("Arrangements", "Arrangement Testing")
    param = lastNode.createBooleanParam("bypass", "Bypass Arrangment")

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.bypass = param
    del param

    param = lastNode.createDoubleParam("Multiply2mix", "Slice Mixer")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.67, 0)
    lastNode.Multiply2mix = param
    del param

    param = lastNode.createSeparatorParam("sep__Arrange", "Arrangement Settings")

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep__Arrange = param
    del param

    param = lastNode.createIntParam("arrange_x", "Arrangement  X")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4096, 0)
    param.setDefaultValue(1300, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("Move the Arrangement Left and Right")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(131, 0)
    lastNode.arrange_x = param
    del param

    param = lastNode.createIntParam("arrange_y", "Arrangement Y")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4096, 0)
    param.setDefaultValue(1700, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(151, 0)
    lastNode.arrange_y = param
    del param

    param = lastNode.createIntParam("arrange_r", "Arrangement Rotate")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.arrange_r = param
    del param

    param = lastNode.createSeparatorParam("sep_____ruler", "Ruler Settings")

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep_____ruler = param
    del param

    param = lastNode.createIntParam("T_ruler_x", "Translate Ruler X")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4096, 0)
    param.setDefaultValue(380, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(284, 0)
    lastNode.T_ruler_x = param
    del param

    param = lastNode.createIntParam("T_ruler_y", "Translate Ruler Y")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4096, 0)
    param.setDefaultValue(1755, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1702, 0)
    lastNode.T_ruler_y = param
    del param

    param = lastNode.createIntParam("T_ruler_r", "Rotate Ruler")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.Arrangements.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.T_ruler_r = param
    del param

    lastNode.Readers = lastNode.createPageParam("Readers", "Readers")
    param = lastNode.createFileParam("Read_blankfilename", "3072 Blank File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/0001-blank-3072.png")
    lastNode.Read_blankfilename = param
    del param

    param = lastNode.createFileParam("Read_Rulerfilename", "Ruler File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/slices/pizzaRuler_18_inch_200dpi.png")
    lastNode.Read_Rulerfilename = param
    del param

    param = lastNode.createFileParam("Read_700filename", "PaperPlate File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/0700-plate-plainwhite.png")
    lastNode.Read_700filename = param
    del param

    param = lastNode.createFileParam("Read_3000filename", "Cheese File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/3000-cheese-mozzarella.png")
    lastNode.Read_3000filename = param
    del param

    param = lastNode.createFileParam("Read_2000filename", "Sauce File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/2000-sauce-tomato.png")
    lastNode.Read_2000filename = param
    del param

    param = lastNode.createFileParam("Read_1000filename", "Crust File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/1000-crust-thin.png")
    lastNode.Read_1000filename = param
    del param

    param = lastNode.createFileParam("Read_slicefilename", "Slice Mask File")
    param.setSequenceEnabled(True)

    # Add the param to the page
    lastNode.Readers.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("[Project]/../ingredients-db/masks/slice-#.png")
    lastNode.Read_slicefilename = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['ComboControl', 'Arrangements', 'Readers', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Read_1000"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_1000")
    lastNode.setLabel("Read_1000")
    lastNode.setPosition(1902, -356)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_1000 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/1000-crust-thin.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_1000"

    # Start of node "Transform_inSlice"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform_inSlice")
    lastNode.setLabel("Transform_inSlice")
    lastNode.setPosition(1605, -536)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform_inSlice = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(131, 0)
        param.setValue(151, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform_inSlice"

    # Start of node "Read_Ruler"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_Ruler")
    lastNode.setLabel("Read_Ruler")
    lastNode.setPosition(1367, 1220)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_Ruler = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/slices/pizzaRuler_18_inch_200dpi.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_Ruler"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1608, 132)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Read_700"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_700")
    lastNode.setLabel("Read_700")
    lastNode.setPosition(1919, 828)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_700 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/0700-plate-plainwhite.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_700"

    # Start of node "Transform_plate"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform_plate")
    lastNode.setLabel("Transform_plate")
    lastNode.setPosition(1931, 977)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform_plate = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(1850, 0)
        param.setValue(2370, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(43, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.4, 0)
        param.setValue(1.4, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(640, 0)
        param.setValue(640, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform_plate"

    # Start of node "Multiply2"
    lastNode = app.createNode("net.sf.openfx.MergeMultiply", 1, group)
    lastNode.setScriptName("Multiply2")
    lastNode.setLabel("Multiply2")
    lastNode.setPosition(1610, 587)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMultiply2 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.67, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(multiply)</Natron>")
        del param

    del lastNode
    # End of node "Multiply2"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(1923, 592)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Backdrop1"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop1")
    lastNode.setLabel("Backdrop1")
    lastNode.setPosition(1243, 318)
    lastNode.setSize(822, 344)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupBackdrop1 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"8\" color=\"#000000\" face=\"Droid Sans\">Show Slice\n\nto disable, select Multipy2 and hit \'d\' on the keyboard</font>")
        del param

    del lastNode
    # End of node "Backdrop1"

    # Start of node "Backdrop2"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop2")
    lastNode.setLabel("Backdrop2")
    lastNode.setPosition(1260, 779)
    lastNode.setSize(1225, 967)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupBackdrop2 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"8\" color=\"#000000\" face=\"Droid Sans\">Show Plate\n\nto enable, select Merge 3 and hit \'d\'</font>")
        del param

    del lastNode
    # End of node "Backdrop2"

    # Start of node "Backdrop4"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop4")
    lastNode.setLabel("Backdrop4")
    lastNode.setPosition(1236, -428)
    lastNode.setSize(1161, 699)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupBackdrop4 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"7\" color=\"#000000\" face=\"Droid Sans\">the B pipe is always the master resolution! (in this case, 3072x3072)</font>")
        del param

    del lastNode
    # End of node "Backdrop4"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(1605, -620)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Read_blank"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_blank")
    lastNode.setLabel("Read_blank")
    lastNode.setPosition(1884, -717)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_blank = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/0001-blank-3072.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_blank"

    # Start of node "Backdrop6"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop6")
    lastNode.setLabel("Backdrop6")
    lastNode.setPosition(1527, -769)
    lastNode.setSize(519, 295)
    lastNode.setColor(0.45, 0.45, 0.45)
    groupBackdrop6 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<font size=\"8\" color=\"#ffffff\" face=\"Droid Sans\">4k-resolution Backing</font>")
        del param

    del lastNode
    # End of node "Backdrop6"

    # Start of node "Reformat1"
    lastNode = app.createNode("net.sf.openfx.Reformat", 2, group)
    lastNode.setScriptName("Reformat1")
    lastNode.setLabel("Reformat1")
    lastNode.setPosition(1896, -612)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Reformat1"

    # Start of node "Reformat2"
    lastNode = app.createNode("net.sf.openfx.Reformat", 2, group)
    lastNode.setScriptName("Reformat2")
    lastNode.setLabel("Reformat2")
    lastNode.setPosition(1916, 102)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Reformat2"

    # Start of node "Reformat3"
    lastNode = app.createNode("net.sf.openfx.Reformat", 2, group)
    lastNode.setScriptName("Reformat3")
    lastNode.setLabel("Reformat3")
    lastNode.setPosition(1923, 512)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Reformat3"

    # Start of node "Crop2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop2")
    lastNode.setLabel("Crop2")
    lastNode.setPosition(1608, 210)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop2 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("project")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop2"

    # Start of node "TransformRuler"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("TransformRuler")
    lastNode.setLabel("TransformRuler")
    lastNode.setPosition(1379, 1325)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransformRuler = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(284, 0)
        param.setValue(1702, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(-3, 0)
        param.setValue(6, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "TransformRuler"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1878, 1413)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "DropShadow_core"
    lastNode = app.createNode("fr.inria.DropShadow", 1, group)
    lastNode.setScriptName("DropShadow_core")
    lastNode.setLabel("DropShadow_core")
    lastNode.setPosition(1729, 1278)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupDropShadow_core = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDoubleParam("shadowAngle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-360, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(-45, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowAngle = param
    del param

    param = lastNode.createDoubleParam("shadowDist", "Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0, 0)
    lastNode.shadowDist = param
    del param

    param = lastNode.createDouble2DParam("shadowBlur", "Bluriness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    param.setValue(30, 1)
    lastNode.shadowBlur = param
    del param

    param = lastNode.createColorParam("shadowOpacity", "Opacity", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(0.5, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.9, 0)
    param.setValue(0.9, 1)
    param.setValue(0.9, 2)
    param.setValue(0.9, 3)
    lastNode.shadowOpacity = param
    del param

    param = lastNode.createColorParam("shadowColor", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowColor = param
    del param

    param = lastNode.createBooleanParam("shadowCFS", "Color from source")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.shadowCFS = param
    del param

    param = lastNode.createBooleanParam("shadowOnly", "Shadow only")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.shadowOnly = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "DropShadow_core"

    groupgroup = groupDropShadow_core
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.8, 0.5, 0.3)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDoubleParam("shadowAngle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-360, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(-45, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowAngle = param
    del param

    param = lastNode.createDoubleParam("shadowDist", "Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0, 0)
    lastNode.shadowDist = param
    del param

    param = lastNode.createDouble2DParam("shadowBlur", "Bluriness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    param.setValue(30, 1)
    lastNode.shadowBlur = param
    del param

    param = lastNode.createColorParam("shadowOpacity", "Opacity", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(0.5, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.9, 0)
    param.setValue(0.9, 1)
    param.setValue(0.9, 2)
    param.setValue(0.9, 3)
    lastNode.shadowOpacity = param
    del param

    param = lastNode.createColorParam("shadowColor", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowColor = param
    del param

    param = lastNode.createBooleanParam("shadowCFS", "Color from source")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.shadowCFS = param
    del param

    param = lastNode.createBooleanParam("shadowOnly", "Shadow only")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.shadowOnly = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, groupgroup)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(759, 87)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupgroupShuffle1 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, groupgroup)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(759, 167)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupTransform2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(480, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, groupgroup)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(759, 341)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, groupgroup)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(759, -23)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupMultiply1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.9, 0)
        param.setValue(0.9, 1)
        param.setValue(0.9, 2)
        param.setValue(0.9, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply1"

    # Start of node "Solid1"
    lastNode = app.createNode("net.sf.openfx.Solid", 1, groupgroup)
    lastNode.setScriptName("Solid1")
    lastNode.setLabel("Solid1")
    lastNode.setPosition(584, 87)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupSolid1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    del lastNode
    # End of node "Solid1"

    # Start of node "InputSource"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("InputSource")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(759, -112)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInputSource = lastNode

    del lastNode
    # End of node "InputSource"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1000, 497)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, groupgroup)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(759, 260)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupgroupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(30, 0)
        param.setValue(30, 1)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, groupgroup)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1000, 329)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupMerge1 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, groupgroup)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(759, 87)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupgroupShuffle2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, groupgroup)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(759, 167)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(480, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Premult2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, groupgroup)
    lastNode.setScriptName("Premult2")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(759, 341)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupPremult2 = lastNode

    del lastNode
    # End of node "Premult2"

    # Start of node "Multiply2"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, groupgroup)
    lastNode.setScriptName("Multiply2")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(759, -23)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupMultiply2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.9, 0)
        param.setValue(0.9, 1)
        param.setValue(0.9, 2)
        param.setValue(0.9, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply2"

    # Start of node "Solid2"
    lastNode = app.createNode("net.sf.openfx.Solid", 1, groupgroup)
    lastNode.setScriptName("Solid2")
    lastNode.setLabel("Solid1")
    lastNode.setPosition(584, 87)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupSolid2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    del lastNode
    # End of node "Solid2"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(759, -112)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output2"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1000, 497)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput2 = lastNode

    del lastNode
    # End of node "Output2"

    # Start of node "BlurCImg1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, groupgroup)
    lastNode.setScriptName("BlurCImg1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(759, 260)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupgroupBlurCImg1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(30, 0)
        param.setValue(30, 1)
        del param

    del lastNode
    # End of node "BlurCImg1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, groupgroup)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1000, 329)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupMerge2 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupShuffle1.connectInput(0, groupgroupSolid1)
    groupgroupShuffle1.connectInput(1, groupgroupMultiply1)
    groupgroupTransform2.connectInput(0, groupgroupShuffle1)
    groupgroupPremult1.connectInput(0, groupgroupBlur1)
    groupgroupMultiply1.connectInput(0, groupgroupInputSource)
    groupgroupOutput1.connectInput(0, groupgroupMerge1)
    groupgroupBlur1.connectInput(0, groupgroupTransform2)
    groupgroupMerge1.connectInput(0, groupgroupPremult1)
    groupgroupMerge1.connectInput(1, groupgroupInputSource)
    groupgroupShuffle2.connectInput(0, groupgroupSolid2)
    groupgroupShuffle2.connectInput(1, groupgroupMultiply2)
    groupgroupTransform1.connectInput(0, groupgroupShuffle2)
    groupgroupPremult2.connectInput(0, groupgroupBlurCImg1)
    groupgroupMultiply2.connectInput(0, groupgroupInput1)
    groupgroupOutput2.connectInput(0, groupgroupMerge2)
    groupgroupBlurCImg1.connectInput(0, groupgroupTransform1)
    groupgroupMerge2.connectInput(0, groupgroupPremult2)
    groupgroupMerge2.connectInput(1, groupgroupInput1)

    param = groupgroupShuffle1.getParam("disableNode")
    groupgroup.getParam("shadowCFS").setAsAlias(param)
    del param
    param = groupgroupTransform2.getParam("translate")
    param.setExpression("cos(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 0)
    param.setExpression("sin(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 1)
    del param
    param = groupgroupMultiply1.getParam("value")
    groupgroup.getParam("shadowOpacity").setAsAlias(param)
    del param
    param = groupgroupSolid1.getParam("color")
    groupgroup.getParam("shadowColor").setAsAlias(param)
    del param
    param = groupgroupBlur1.getParam("size")
    groupgroup.getParam("shadowBlur").setAsAlias(param)
    del param
    param = groupgroupMerge1.getParam("disableNode")
    groupgroup.getParam("shadowOnly").setAsAlias(param)
    del param
    param = groupgroupShuffle2.getParam("disableNode")
    groupgroup.getParam("shadowCFS").setAsAlias(param)
    del param
    param = groupgroupTransform1.getParam("translate")
    param.setExpression("cos(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 0)
    param.setExpression("sin(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 1)
    del param
    param = groupgroupMultiply2.getParam("value")
    groupgroup.getParam("shadowOpacity").setAsAlias(param)
    del param
    param = groupgroupSolid2.getParam("color")
    groupgroup.getParam("shadowColor").setAsAlias(param)
    del param
    param = groupgroupBlurCImg1.getParam("size")
    groupgroup.getParam("shadowBlur").setAsAlias(param)
    del param
    param = groupgroupMerge2.getParam("disableNode")
    groupgroup.getParam("shadowOnly").setAsAlias(param)
    del param


    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(1613, 1518)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge5"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(1697, 1420)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    del lastNode
    # End of node "Switch1"

    # Start of node "Read_3000"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_3000")
    lastNode.setLabel("Read_3000")
    lastNode.setPosition(2249, -354)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_3000 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/3000-cheese-mozzarella.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_3000"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(1914, -105)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Merge6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6")
    lastNode.setLabel("Merge6")
    lastNode.setPosition(1916, 11)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge6"

    # Start of node "Read_2000"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_2000")
    lastNode.setLabel("Read_2000")
    lastNode.setPosition(2081, -360)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_2000 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/2000-sauce-tomato.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    del lastNode
    # End of node "Read_2000"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(2261, -224)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.95, 0)
        param.setValue(0.95, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1536, 0)
        param.setValue(1536, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Transform3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform3")
    lastNode.setLabel("Transform3")
    lastNode.setPosition(2096, -223)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform3 = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.04, 0)
        param.setValue(1.04, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1536, 0)
        param.setValue(1536, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform3"

    # Start of node "DropShadow3_2"
    lastNode = app.createNode("fr.inria.DropShadow", 1, group)
    lastNode.setScriptName("DropShadow3_2")
    lastNode.setLabel("DropShadow3_2")
    lastNode.setPosition(1726, 899)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupDropShadow3_2 = lastNode


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDoubleParam("shadowAngle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-360, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(-45, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowAngle = param
    del param

    param = lastNode.createDoubleParam("shadowDist", "Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.shadowDist = param
    del param

    param = lastNode.createDouble2DParam("shadowBlur", "Bluriness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(60, 0)
    param.setValue(60, 1)
    lastNode.shadowBlur = param
    del param

    param = lastNode.createColorParam("shadowOpacity", "Opacity", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(0.5, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.55, 0)
    param.setValue(0.55, 1)
    param.setValue(0.55, 2)
    param.setValue(0.55, 3)
    lastNode.shadowOpacity = param
    del param

    param = lastNode.createColorParam("shadowColor", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowColor = param
    del param

    param = lastNode.createBooleanParam("shadowCFS", "Color from source")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.shadowCFS = param
    del param

    param = lastNode.createBooleanParam("shadowOnly", "Shadow only")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.shadowOnly = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "DropShadow3_2"

    groupgroup = groupDropShadow3_2
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.8, 0.5, 0.3)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createDoubleParam("shadowAngle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-360, 0)
    param.setDisplayMaximum(360, 0)
    param.setDefaultValue(-45, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowAngle = param
    del param

    param = lastNode.createDoubleParam("shadowDist", "Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)
    param.setDefaultValue(20, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.shadowDist = param
    del param

    param = lastNode.createDouble2DParam("shadowBlur", "Bluriness")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setMinimum(0, 1)
    param.setMaximum(1000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(60, 0)
    param.setValue(60, 1)
    lastNode.shadowBlur = param
    del param

    param = lastNode.createColorParam("shadowOpacity", "Opacity", True)
    param.setMinimum(-1.79769e+308, 0)
    param.setMaximum(1.79769e+308, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setDefaultValue(0.5, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(-1.79769e+308, 1)
    param.setMaximum(1.79769e+308, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setDefaultValue(0.5, 1)
    param.restoreDefaultValue(1)
    param.setMinimum(-1.79769e+308, 2)
    param.setMaximum(1.79769e+308, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)
    param.setDefaultValue(0.5, 2)
    param.restoreDefaultValue(2)
    param.setMinimum(-1.79769e+308, 3)
    param.setMaximum(1.79769e+308, 3)
    param.setDisplayMinimum(0, 3)
    param.setDisplayMaximum(1, 3)
    param.setDefaultValue(0.5, 3)
    param.restoreDefaultValue(3)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.55, 0)
    param.setValue(0.55, 1)
    param.setValue(0.55, 2)
    param.setValue(0.55, 3)
    lastNode.shadowOpacity = param
    del param

    param = lastNode.createColorParam("shadowColor", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.shadowColor = param
    del param

    param = lastNode.createBooleanParam("shadowCFS", "Color from source")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.shadowCFS = param
    del param

    param = lastNode.createBooleanParam("shadowOnly", "Shadow only")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(True)
    lastNode.shadowOnly = param
    del param

    lastNode.userNatron = lastNode.createPageParam("userNatron", "User")
    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings', 'userNatron'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, groupgroup)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(759, 87)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupgroupShuffle1 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, groupgroup)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(759, 167)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupTransform2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70.71067811865476, 0)
        param.setValue(-70.71067811865474, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(480, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, groupgroup)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(759, 341)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Multiply1"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, groupgroup)
    lastNode.setScriptName("Multiply1")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(759, -23)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupMultiply1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.55, 0)
        param.setValue(0.55, 1)
        param.setValue(0.55, 2)
        param.setValue(0.55, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply1"

    # Start of node "Solid1"
    lastNode = app.createNode("net.sf.openfx.Solid", 1, groupgroup)
    lastNode.setScriptName("Solid1")
    lastNode.setLabel("Solid1")
    lastNode.setPosition(584, 87)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupSolid1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    del lastNode
    # End of node "Solid1"

    # Start of node "InputSource"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("InputSource")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(759, -112)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInputSource = lastNode

    del lastNode
    # End of node "InputSource"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1000, 497)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Blur1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, groupgroup)
    lastNode.setScriptName("Blur1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(759, 260)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupgroupBlur1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(60, 0)
        param.setValue(60, 1)
        del param

    del lastNode
    # End of node "Blur1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, groupgroup)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1000, 329)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupMerge1 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Shuffle2"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 2, groupgroup)
    lastNode.setScriptName("Shuffle2")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(759, 87)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupgroupShuffle2 = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "Shuffle2"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, groupgroup)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(759, 167)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(70.71067811865476, 0)
        param.setValue(-70.71067811865474, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(480, 0)
        param.setValue(270, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Premult2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, groupgroup)
    lastNode.setScriptName("Premult2")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(759, 341)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupPremult2 = lastNode

    del lastNode
    # End of node "Premult2"

    # Start of node "Multiply2"
    lastNode = app.createNode("net.sf.openfx.MultiplyPlugin", 2, groupgroup)
    lastNode.setScriptName("Multiply2")
    lastNode.setLabel("Multiply1")
    lastNode.setPosition(759, -23)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.48, 0.66, 1)
    groupgroupMultiply2 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("value")
    if param is not None:
        param.setValue(0.55, 0)
        param.setValue(0.55, 1)
        param.setValue(0.55, 2)
        param.setValue(0.55, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Multiply2"

    # Start of node "Solid2"
    lastNode = app.createNode("net.sf.openfx.Solid", 1, groupgroup)
    lastNode.setScriptName("Solid2")
    lastNode.setLabel("Solid1")
    lastNode.setPosition(584, 87)
    lastNode.setSize(80, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupSolid2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    del lastNode
    # End of node "Solid2"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("InputSource")
    lastNode.setPosition(759, -112)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Output2"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1000, 497)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput2 = lastNode

    del lastNode
    # End of node "Output2"

    # Start of node "BlurCImg1"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 3, groupgroup)
    lastNode.setScriptName("BlurCImg1")
    lastNode.setLabel("Blur1")
    lastNode.setPosition(759, 260)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupgroupBlurCImg1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(60, 0)
        param.setValue(60, 1)
        del param

    del lastNode
    # End of node "BlurCImg1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, groupgroup)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1000, 329)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupgroupMerge2 = lastNode

    param = lastNode.getParam("maskInvert")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupShuffle1.connectInput(0, groupgroupSolid1)
    groupgroupShuffle1.connectInput(1, groupgroupMultiply1)
    groupgroupTransform2.connectInput(0, groupgroupShuffle1)
    groupgroupPremult1.connectInput(0, groupgroupBlur1)
    groupgroupMultiply1.connectInput(0, groupgroupInputSource)
    groupgroupOutput1.connectInput(0, groupgroupMerge1)
    groupgroupBlur1.connectInput(0, groupgroupTransform2)
    groupgroupMerge1.connectInput(0, groupgroupPremult1)
    groupgroupMerge1.connectInput(1, groupgroupInputSource)
    groupgroupShuffle2.connectInput(0, groupgroupSolid2)
    groupgroupShuffle2.connectInput(1, groupgroupMultiply2)
    groupgroupTransform1.connectInput(0, groupgroupShuffle2)
    groupgroupPremult2.connectInput(0, groupgroupBlurCImg1)
    groupgroupMultiply2.connectInput(0, groupgroupInput1)
    groupgroupOutput2.connectInput(0, groupgroupMerge2)
    groupgroupBlurCImg1.connectInput(0, groupgroupTransform1)
    groupgroupMerge2.connectInput(0, groupgroupPremult2)
    groupgroupMerge2.connectInput(1, groupgroupInput1)

    param = groupgroupShuffle1.getParam("disableNode")
    groupgroup.getParam("shadowCFS").setAsAlias(param)
    del param
    param = groupgroupTransform2.getParam("translate")
    param.setExpression("cos(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 0)
    param.setExpression("sin(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 1)
    del param
    param = groupgroupMultiply1.getParam("value")
    groupgroup.getParam("shadowOpacity").setAsAlias(param)
    del param
    param = groupgroupSolid1.getParam("color")
    groupgroup.getParam("shadowColor").setAsAlias(param)
    del param
    param = groupgroupBlur1.getParam("size")
    groupgroup.getParam("shadowBlur").setAsAlias(param)
    del param
    param = groupgroupMerge1.getParam("disableNode")
    groupgroup.getParam("shadowOnly").setAsAlias(param)
    del param
    param = groupgroupShuffle2.getParam("disableNode")
    groupgroup.getParam("shadowCFS").setAsAlias(param)
    del param
    param = groupgroupTransform1.getParam("translate")
    param.setExpression("cos(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 0)
    param.setExpression("sin(radians(thisGroup.shadowAngle.get()))*thisGroup.shadowDist.get()", False, 1)
    del param
    param = groupgroupMultiply2.getParam("value")
    groupgroup.getParam("shadowOpacity").setAsAlias(param)
    del param
    param = groupgroupSolid2.getParam("color")
    groupgroup.getParam("shadowColor").setAsAlias(param)
    del param
    param = groupgroupBlurCImg1.getParam("size")
    groupgroup.getParam("shadowBlur").setAsAlias(param)
    del param
    param = groupgroupMerge2.getParam("disableNode")
    groupgroup.getParam("shadowOnly").setAsAlias(param)
    del param


    # Start of node "Merge7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7")
    lastNode.setLabel("Merge7")
    lastNode.setPosition(1978, 1189)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge7"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(2395, -606)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Erode1"
    lastNode = app.createNode("net.sf.cimg.CImgErode", 2, group)
    lastNode.setScriptName("Erode1")
    lastNode.setLabel("Erode1")
    lastNode.setPosition(1729, 1185)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupErode1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessR")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessG")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("NatronOfxParamProcessB")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(-5, 0)
        param.setValue(-5, 1)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Erode1"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(1931, 930)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("gamma")
    if param is not None:
        param.setValue(0.38, 0)
        param.setValue(0.38, 1)
        param.setValue(0.38, 2)
        param.setValue(0.38, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "Read_9570"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_9570")
    lastNode.setLabel("Read_9570")
    lastNode.setPosition(2096, 830)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_9570 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/9570-seasoning-oregano.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_9570"

    # Start of node "Merge8"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge8")
    lastNode.setLabel("Merge8")
    lastNode.setPosition(1931, 1058)
    lastNode.setSize(104, 40)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge8 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge8"

    # Start of node "Transform4"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4")
    lastNode.setLabel("Transform4")
    lastNode.setPosition(2108, 940)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(977, 0)
        param.setValue(1482, 1)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1536, 0)
        param.setValue(1536, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4"

    # Start of node "ColorCorrect1"
    lastNode = app.createNode("net.sf.openfx.ColorCorrectPlugin", 2, group)
    lastNode.setScriptName("ColorCorrect1")
    lastNode.setLabel("ColorCorrect1")
    lastNode.setPosition(2108, 1003)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.48, 0.66, 1)
    groupColorCorrect1 = lastNode

    param = lastNode.getParam("MasterGamma")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("MasterGain")
    if param is not None:
        param.setValue(0, 1)
        param.setValue(0, 2)
        del param

    param = lastNode.getParam("toneRanges")
    if param is not None:
        param.setCurveColor(0, 0.6, 0.4, 0.6)
        param.deleteAllControlPoints(0)
        param.addControlPoint(0, 0, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(0, 0.09, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.setCurveColor(1, 0.8, 0.7, 0.6)
        param.deleteAllControlPoints(1)
        param.addControlPoint(1, 0.5, 0, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        param.addControlPoint(1, 1, 1, 0, 0, NatronEngine.Natron.KeyframeTypeEnum.eKeyframeTypeHorizontal)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "ColorCorrect1"

    # Start of node "Merge9"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge9")
    lastNode.setLabel("Merge9")
    lastNode.setPosition(1613, 1643)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge9 = lastNode

    param = lastNode.getParam("disableNode")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Merge9"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1658, 1191)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(2403, 1147)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(1613, 1939)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "In"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("In")
    lastNode.setLabel("In")
    lastNode.setPosition(1605, -915)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupIn = lastNode

    del lastNode
    # End of node "In"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1658, 913)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Read_slice"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read_slice")
    lastNode.setLabel("Read_slice")
    lastNode.setPosition(1911, 357)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead_slice = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadPNG")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../ingredients-db/masks/slice-#.png")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("unpremult")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Read_slice"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(2096, -163)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Premult2"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult2")
    lastNode.setLabel("Premult2")
    lastNode.setPosition(2261, -123)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult2 = lastNode

    del lastNode
    # End of node "Premult2"

    # Start of node "Switch_bypass"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch_bypass")
    lastNode.setLabel("Switch_bypass")
    lastNode.setPosition(1613, 1797)
    lastNode.setSize(104, 26)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch_bypass = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch_bypass"

    # Start of node "Merge10"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge10")
    lastNode.setLabel("Merge10")
    lastNode.setPosition(1854, 1789)
    lastNode.setSize(104, 43)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge10 = lastNode

    del lastNode
    # End of node "Merge10"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2544, -907)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(2544, 1803)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Now that all nodes are created we can connect them together, restore expressions
    groupTransform_inSlice.connectInput(0, groupMerge2)
    groupMerge1.connectInput(0, groupReformat2)
    groupMerge1.connectInput(1, groupTransform_inSlice)
    groupTransform_plate.connectInput(0, groupGrade1)
    groupMultiply2.connectInput(0, groupCrop2)
    groupMultiply2.connectInput(1, groupInvert1)
    groupInvert1.connectInput(0, groupReformat3)
    groupMerge2.connectInput(0, groupReformat1)
    groupMerge2.connectInput(1, groupIn)
    groupReformat1.connectInput(0, groupRead_blank)
    groupReformat2.connectInput(0, groupMerge6)
    groupReformat3.connectInput(0, groupRead_slice)
    groupCrop2.connectInput(0, groupMerge1)
    groupTransformRuler.connectInput(0, groupRead_Ruler)
    groupMerge3.connectInput(0, groupMerge7)
    groupMerge3.connectInput(1, groupDropShadow_core)
    groupMerge3.connectInput(3, groupDropShadow3_2)
    groupDropShadow_core.connectInput(0, groupErode1)
    groupMerge5.connectInput(0, groupSwitch1)
    groupMerge5.connectInput(1, groupDot2)
    groupSwitch1.connectInput(1, groupMerge3)
    groupMerge4.connectInput(0, groupRead_1000)
    groupMerge4.connectInput(1, groupPremult1)
    groupMerge6.connectInput(0, groupMerge4)
    groupMerge6.connectInput(1, groupPremult2)
    groupTransform1.connectInput(0, groupRead_3000)
    groupTransform3.connectInput(0, groupRead_2000)
    groupDropShadow3_2.connectInput(0, groupDot4)
    groupMerge7.connectInput(0, groupDot3)
    groupMerge7.connectInput(1, groupMerge8)
    groupDot1.connectInput(0, groupReformat1)
    groupErode1.connectInput(0, groupDot2)
    groupGrade1.connectInput(0, groupRead_700)
    groupMerge8.connectInput(0, groupTransform_plate)
    groupMerge8.connectInput(1, groupColorCorrect1)
    groupTransform4.connectInput(0, groupRead_9570)
    groupColorCorrect1.connectInput(0, groupTransform4)
    groupMerge9.connectInput(0, groupMerge5)
    groupMerge9.connectInput(1, groupTransformRuler)
    groupDot2.connectInput(0, groupDot4)
    groupDot3.connectInput(0, groupDot1)
    groupOutput1.connectInput(0, groupSwitch_bypass)
    groupDot4.connectInput(0, groupMultiply2)
    groupPremult1.connectInput(0, groupTransform3)
    groupPremult2.connectInput(0, groupTransform1)
    groupSwitch_bypass.connectInput(0, groupMerge9)
    groupSwitch_bypass.connectInput(1, groupMerge10)
    groupMerge10.connectInput(0, groupDot3)
    groupMerge10.connectInput(1, groupDot6)
    groupDot5.connectInput(0, groupIn)
    groupDot6.connectInput(0, groupDot5)

    param = groupRead_1000.getParam("filename")
    group.getParam("Read_1000filename").setAsAlias(param)
    del param
    param = groupTransform_inSlice.getParam("translate")
    param.setExpression("thisGroup.arrange_x.get()", False, 0)
    param.setExpression("thisGroup.arrange_y.get()", False, 1)
    del param
    param = groupTransform_inSlice.getParam("rotate")
    param.setExpression("thisGroup.arrange_r.get()", False, 0)
    del param
    param = groupRead_Ruler.getParam("filename")
    group.getParam("Read_Rulerfilename").setAsAlias(param)
    del param
    param = groupRead_700.getParam("filename")
    group.getParam("Read_700filename").setAsAlias(param)
    del param
    param = groupMultiply2.getParam("mix")
    group.getParam("Multiply2mix").setAsAlias(param)
    del param
    param = groupRead_blank.getParam("filename")
    group.getParam("Read_blankfilename").setAsAlias(param)
    del param
    param = groupTransformRuler.getParam("translate")
    param.setExpression("thisGroup.T_ruler_x.get()", False, 0)
    param.setExpression("thisGroup.T_ruler_y.get()", False, 1)
    del param
    param = groupTransformRuler.getParam("rotate")
    param.setExpression("thisGroup.T_ruler_r.get()", False, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.slaveTo(groupMultiply2.getParam("mix"), 0, 0)
    del param
    param = groupRead_3000.getParam("filename")
    group.getParam("Read_3000filename").setAsAlias(param)
    del param
    param = groupRead_2000.getParam("filename")
    group.getParam("Read_2000filename").setAsAlias(param)
    del param
    param = groupRead_slice.getParam("filename")
    group.getParam("Read_slicefilename").setAsAlias(param)
    del param
    param = groupSwitch_bypass.getParam("which")
    param.setExpression("thisGroup.bypass.get()", False, 0)
    del param

    param = group.getParam("elem0")
    param.setExpression("elem0.filename.get()", False, 0)
    del param
    param = group.getParam("elem0_translate")
    param.setExpression("elem0_transform.translate.get()[dimension]", False, 0)
    param.setExpression("elem0_transform.translate.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem0_rotate")
    param.setExpression("elem0_transform.rotate.get()", False, 0)
    del param
    param = group.getParam("elem1")
    param.setExpression("elem1.filename.get()", False, 0)
    del param
    param = group.getParam("elem1_translate")
    param.setExpression("elem1_transform.translate.get()[dimension]", False, 0)
    param.setExpression("elem1_transform.translate.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem1_rotate")
    param.setExpression("elem1_transform.rotate.get()", False, 0)
    del param
    param = group.getParam("elem2")
    param.setExpression("elem2.filename.get()", False, 0)
    del param
    param = group.getParam("elem2_translate")
    param.setExpression("elem2_transform.translate.get()[dimension]", False, 0)
    param.setExpression("elem2_transform.translate.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem2_rotate")
    param.setExpression("elem2_transform.rotate.get()", False, 0)
    del param
    param = group.getParam("elem3")
    param.setExpression("elem3.filename.get()", False, 0)
    del param
    param = group.getParam("elem3_translate")
    param.setExpression("elem3_transform.translate.get()[dimension]", False, 0)
    param.setExpression("elem3_transform.translate.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem3_rotate")
    param.setExpression("elem3_transform.rotate.get()", False, 0)
    del param
    param = group.getParam("elem4")
    param.setExpression("elem4.filename.get()", False, 0)
    del param
    param = group.getParam("elem4_translate")
    param.setExpression("elem4_transform.translate.get()[dimension]", False, 0)
    param.setExpression("elem4_transform.translate.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem4_rotate")
    param.setExpression("elem4_transform.rotate.get()", False, 0)
    del param
    param = group.getParam("elem0_scale")
    param.setExpression("elem0_transform.scale.get()[dimension]", False, 0)
    param.setExpression("elem0_transform.scale.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem1_scale")
    param.setExpression("elem1_transform.scale.get()[dimension]", False, 0)
    param.setExpression("elem1_transform.scale.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem2_scale")
    param.setExpression("elem2_transform.scale.get()[dimension]", False, 0)
    param.setExpression("elem2_transform.scale.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem3_scale")
    param.setExpression("elem3_transform.scale.get()[dimension]", False, 0)
    param.setExpression("elem3_transform.scale.get()[dimension]", False, 1)
    del param
    param = group.getParam("elem4_scale")
    param.setExpression("elem4_transform.scale.get()[dimension]", False, 0)
    param.setExpression("elem4_transform.scale.get()[dimension]", False, 1)
    del param
    try:
        extModule = sys.modules["comboExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
